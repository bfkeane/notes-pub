kernel.org/doc/Documentation/arm/Booting
kernel.org/doc/Documentation/kernel-parameters.txt
kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt (ip= bootparam)
kernel.org/doc/Documentation/kbuild/makefiles.txt
kernel.org/doc/Documentation/kbuild/kconfig-language.txt
kernel.org/doc/Documentation/initrd.txt
www.linux-arm.org/pub/LinuxPlatform/RealViewLink/Booting_ARM_Linux_SMP_on_MPCore.doc
https://www.kernel.org/doc/gorman/pdf/understand.pdf
http://elinux.org/Tims_Notes_on_ARM_memory_allocation
-------------
init/do_mounts*.c
Note: we have
	CONFIG_ROOT_NFS=y
	CONFIG_BLOCK=y
	CONFIG_BLK_DEV_FD= not in .config
----
default root_mountflags = MS_RDONLY | MS_SILENT <include/uapi/linux/fs.h>
__setup("root=",root_dev_setup) -> saved_root_name
__setup("rw",readwrite) -> saved_root_name &= ~MS_RDONLY
__setup("ro",readonly) -> root_mountflags |= MS_RDONLY
__setup("rootwait",rootwait_setup) -> root_wait = 1
__setup("rootflags=",root_mount_data) -> root_mount_data = str
__setup("rootfstype=",fs_names_setup) -> root_fs_names = str
__setup("rootdelay=",root_delay_setup) -> root_delay = strtoul(str)
----
name_to_dev_t(name)
  special names: 
  	/dev/nfs=Root_NFS
  	/dev/ram=Root_RAM0
	/dev/$disk_name$decimal = 
	  blk_lookup_devt(name, partno) -> iterates over block_class devs
	PARTUUID=...
----
do_mount_root(name, fs, flags, data)
  if (sys_mount(name, /root, fs, flags, data)) return err
  sys_chdir(/root)
  ROOT_DEV = pwd.s_dev
  "VFS: Mounted root ($type filesystem) $readonly on device $major:$minor"
----
mount_block_root(name, flags)
  fs_names = alloc_page()
  get_fs_names(fs_names) # assign {rootfstype= option, FS list) to fs_names
  foreach fs_names
    if (!do_mount_root(name, fs_name, flags, root_mount_data)) return
    if EINVAL try next fs_name
    bad superblock on root device:
      "VFS: Cannot open root device $root_device_name or $bdevname: error $err"
      printk_all_partitions()
      "Kernel panic - not syncing: VFS: Unable to mount root fs on $bdevname"
  "List of all partitions"
  printk_all_partitions()
  "No filesystem could mount root, tried: ..."
  "Kernel panic - not syncing: VFS: Unable to mount root fs on $bdevname"
----
create_dev(name, dev_t dev)
  sys_unlink(name)
  sys_mknod(name, S_IFBLK|0600, dev)
----
mount_root()
 if ROOT_DEV==Root_NFS
   if (mount_nfs_root()) return
 create_dev(/dev/root, ROOT_DEV)
 mount_block_root(/dev/root, root_mountflags)
----------
prepare_namespace() # called by main.c:kernel_init_freeable() if !exists(/init)
  if saved_root_name[0]
    root_device_name = saved_root_name
    ROOT_DEV = name_to_dev_t(root_device_name)
    if !strncmp(root_device_name, /dev/, 5)
      root_device_name += 5
  if !initrd_load()
    if is_floppy
      rd_load_disk() loads floppy disk /dev/root to /dev/ram.
    mount_root()
  devtmpfs_mount("dev") # ie relative to pwd, ie /root/dev
  sys_mount(., /, NULL, MS_MOVE, NULL)
  sys_chroot(.)
----------
We have CONFIG_BLK_DEV_INITRD=y.
The means start_kernel() 
----------
# "devtmpfs is auto-mounted after kernel mounts root filesystem" (devtmpfs.c)
devtmpfs_mount(mntdir) # drivers/base/devtmpfs.c
  # only implemented if CONFIG_DEVTMPFS_MOUNT
  sys_mount("devtmpfs", mntdir, "devtmpfs", MS_SILENT, NULL)
--------------------------------------------------------------------------------
include/linux/root_dev.h
	Root_NFS = MKDEV(UNNAMED_MAJOR=0, 255)	# include/uapi/linux/major.h
	Root_RAM0 = MKDEV(RAMDISK_MAJOR, 0)	# drivers/block/brd.c
--------------------------------------------------------------------------------
Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)
	RAMDISK: gzip image found at block 0
rd_load_image
  identify_ramdisk_image
  <copy data in from /initrd.image to /dev/ram
----------
initrd_load	# init/do_mounts_initrd.c
  # enabled unless no_initrd bootparam defined
  create_dev(/dev/ram, Root_RAM0)
  # "load the initrd data into /dev/ram0 and execute it as initrd". linuxrc?
  if (rd_load_image(/initrd.image))
    handle_initrd() 
----------
init/initramfs.c
populate_rootfs is an initcall. init/main.c:do_initcalls sequences initcalls
by group:
	early, core, postcore, arch, subsys, fs, device
From what I can tell, rootfs is effectively a subgroup appended to fs.

populate_rootfs
  # decompress INTERNAL initramfs: I assume this fails since we lack internal
  unpack_to_rootfs(__initramfs_start, __initramfs_size)
  # unpack rootfs image as initramfs
  unpack_to_rootfs(initrd_start, size)
  free_initrd()
----------
wiki.xilinx.com/Build+and+Modify+a+Rootfs
Two formats being used for root filesystems.
  Before Vivado/SDK 2013.1, ramdisk/initrd (ramdisk.image.gz).
  Since then, initramfs.
As user comment posted 4Feb2015 at bottom of this page states:
rootfs for zynq is now a gzipped cpio initramfs.

I don't feel pedantic enough to chg u-boot-xlnx/include/configs/zynq_common.h
which uses the terms ramdisk instead of initramfs, eg in sdboot.
BTW this file is where the u-boot env is defined:
	ethaddr=00:0a:35:00:01:22
	sdboot
also: CONFIG_BOOT_DELAY 3
Note apparently u-boot-xlnx can program the fpga.
	
----------
ramfs-root-fs-initramfs.txt
With ramfs you basically mount the disk cache as a filesystem. Always dirty.
  cf older "ram disk": synthetic block device made out of RAM.
tmpfs is a derivative of ramfs: size limit hence usable by normal users.
rootfs is a special instance of ramfs-tmpfs.
(This is entry0 in mountall's lib/init/fstab.)
Systems just mount another fs over rootfs and ignore it.
You can't unmount rootfs.

All 2.6 kernels contain initramfs; kernel extracts into rootfs & execs /init.
	Q where is this code? And what if root= also used?
initramfs requires no kernel FS; simple cpio extraction code stored __init.
Contrary to txt doc/2.6, current kernel auto-mounts /dev/root where ROOTDEV is
	root= OR  ??
initrd (init ramdisk) was a gzipped _filesystem_ image (eg ext2).
	do_mounts_rd.c:rd_load_disk() loads floppy disk /dev/root to /dev/ram.
initramfs impls (eg busybox switch_root) must
	find -xdev / -exec rm '{}' ';'
	overmount rootfs with the new root
		cd /newmount
		mount --move . /
		chroot .
	attach stdio to the new /dev/console
	exec the new init
----------
summary of root filesystem init:
kernel_init_freeable.do_basic_setup.devtmpfs_init.devtmpfsd:
	mount devtmpfs /	# i guess this is needed during early startup?
kernel_init_freeable.prepare_namespace:
	ROOT_DEV = name_to_dev_t(mmcblk0p2)
	mount_root:
		mknod /dev/root ROOT_DEV
		mount -o root_mountflags /dev/root /root
		cd /root
		"VFS: Mounted root ($type filesystem) $readonly on device $major:$minor"
	mount devtmpfs /root/dev 	# devtmpfs_mount("dev")
	mount --move . /		# overmount devtmpfs w/ rootfs
	chroot .
---
when does current become defined? Percpu handled _after_ rootfs init, no?
  ans: in threads created by init/main.c:rest_init().  percpu?
================================================================================
if /init does NOT exist
  if !initrd_load
    mknod /dev/root ROOT_DEV, where ROOT_DEV= name_to_dev_t(root=) or 0,0 ??
    	beats me what if anything dev_t=(0,0) means, but that's irrelevant to us
	ie /dev/root = synonym for the root device (mmcblk0p2)
    mount /dev/root /root --type <each supported filesystem in turn>
    
================================================================================
early_param(str, fn) vs __setup(str, fn): former sets obj_kernel_param.early=1
main.c:unknown_bootoption builds envp_init[], argv_init[] passed via do_execve()
  Note any unknown param=val bootargs are put in envp_init[]
Before start_kernel processes cmdline, setup_arch calls parse_early_options
which only processes params defined early=1.
================================================================================
devtmpfsd
  sys_mount("devtmpfs", "/", "devtmpfs", MS_SILENT, "mode=0755")
  chdir /..  # traverse into overmounted root
  chroot .
  loop forever, handling mknod/rmnod requests
devtmpfs_init
  register_filesystem(&dev_fs_type) # dev_fs_type = { "devtmpfs", dev_mount }
  kthread_run(devtmpfsd, "kdevtmpfs")
  wait for devtmpfsd to enter request-processing loop
kernel_init
  kernel_init_freeable
    sched_init_smp
    open /dev/console on the rootfs
    do_basic_setup
      driver_init
        devtmpfs_init
        devices_init
        buses_init
        classes_init
        platform_bus_init
      do_initcalls
        populate_rootfs
    if /init does NOT exist
      prepare_namespace
  free_initmem
  run_init_process
rest_init
  kernel_thread(kernel_init)
  kernel_thread(kthreadd)
  cpu_idle
start_kernel
  ...
  rest_init
================================================================================
devtmpfs.c defines the global ftns:
  devtmpfs_create_node()	# called from core.c:device_add()
  devtmpfs_delete_node()	# called from core.c:device_del()
These guys enqueue requests handled by devtmpfsd.
Ie: device nodes are NOT CREATED BY UDEV.
================================================================================
The linker script 
	arch/arm/kernel/vmlinux.lds
is built using cpp from
	arch/arm/kernel/vmlinux.lds.S
The .lds.S includes
	include/asm-generic/vmlinux.lds.h
	arch/arm/include/asm/{cache,page,memory,thread-info}.h
================================================================================
Boot messages:
	Waiting for root device /dev/mmcblk0p2...
	mmc0: new high speed SDHC card at address 59b4
	mmcblk0: mmc0:59b4 NCard 14.7 GiB 
	 mmcblk0: p1 p2
"Waiting":
prepare_namespace
  waits for drivers/base/dd.c:driver_probe_device() to complete??

Via kernel_init.do_basic_setup.platform_bus_init?
[Russell King wrote a lot of this stuff.]
/sys clues:
/sys/class/mmc_host/mmc0/device/driver -> 
	 	../../../bus/platform/drivers/sdhci-zynq
This driver name is defined in 
	drivers/mmc/host/sdhci-of-xilinxps.c 
		matched by .dts compatible=xlnx,ps7-sdhci-1.00.a
	
drivers/mmc/core/bus.c:mmc_add_card
drivers/mmc/core/mmc.c:mmc_attach_mmc
drivers/mmc/core/core.c:mmc_rescan_try_freq
drivers/mmc/core/core.c:mmc_rescan
drivers/mmc/core/host.c:mmc_alloc_host
drivers/mmc/host/sdhci-pltfm.c:sdhci_pltfm_init
drivers/mmc/host/sdhci-pltfm.c:sdhci_pltfm_register
drivers/mmc/host/sdhci-of-xilinxps.c:sdhci_zynq_probe

module_platform_driver -> module_driver -> calls platform_driver_register via 
    module_init (invoked by kernel_init.do_basic_setup.do_initcalls, I think) ie
driver_register
platform_driver_register
kernel_init.do_basic_setup.do_initcalls

Q: how sdhci_zynq_probe invoked? Once sdhci_zynq_of_match matches DT compat?
of_driver_match_device(dev, drv) -> of_match_device
platform_match

driver_register
platform_driver_register
---------
http://stackoverflow.com/questions/19244847/from-where-platform-device-gets-it-name

Device name is 1st defined in dts file, driver name in platform driver code.
If these 2 match .probe is called which confirms device really exists.
arch/board init calls platform_device_add or platform_add_devices via OF ftns
that scan the tree.

arch/arm/kernel/
setup_arch
  setup_machine_fdt
     unflatten_device_tree

================================================================================
Makefiles
Link order is significant for module_init() / __initcall() functions.
If CONFIG_FOO=y (or m), then obj-$(CONFIG_FOO) += foo.o, then file is ignored.
-------------
Chk CONFIG: =yu(set in 3.18.0 defconfig, net set in doreen)
            =y-("", absent from doreen)
CONFIG_LOCKDEP
CONFIG_CGROUPS
CONFIG_CC_STACKPROTECTOR
CONFIG_GENERIC_CLOCKEVENTS=y: kernel/time/clockevents.c:clockevents_notify()
CONFIG_HOTPLUG_CPU=y: kernel/timer/hrtimer.c call to clockevents_notify()
                    hotcpu_notifier() in page_alloc_init()
		       -> cpu_notifier()
		          register_cpu_notifier()
CONFIG_HIGHMEM=yu: page_address_init() [called from start_kernel()]
CONFIG_PAGE_OFFSET=(40000000,c0000000). (arch/arm/include/arm/memory.h)
CONFIG_NO_BOOTMEM=y-. (mm/Makefile)
CONFIG_PHYS_OFFSET=--.
-------------
kernel/time stuff:
tick_notify()
  tick_check_new_device
    tick_setup_device
      tick_setup_periodic
        tick_set_periodic_handler(): dev->event_handler = tick_handle_periodic;
-------------
http://events.linuxfoundation.org/sites/events/files/slides/petazzoni-device-tree-dummies.pdf
.dtsi generally includes SoC-level defns.
chosen node: bootargs
"Platform devices" are dt children of "simple_bus" ie memory-mapped bus -
  ie cpu can directly access devices instead of going through an intermediate
  driver (i2c, spi).
pinctrl driver?
Interrupt trees differ from addressing trees, thus need links.
-------------
device.org/DeviceTreeUsage
Every device in the system is represented by a device tree node,
and every node rep'ing a device must have a compatible prop to bind driver.
-------------
kernel.org/doc/Documentation/devicetree/usage-model.txt
DT is data-driven way to provide sw board support.
But seems to me, supporting multiple boards with single kernel image is unlikely
unless boards are pretty closely related. One zimage might support i102 & i103,
with different DTs. Also if a board rev needs special sw fixups (scn 2.2) you
can match on a more specific compatible value (different .dtb for different
board revs) if indeed these fixups have be performed in kernel during init.
Anyway, main use of DT is device population.
!! What DT_MACHINE_START do we use? !! arch/arm/kernel/devtree.c:208 is useless.
  I guess CONFIG_ARCH_MULTIPLATFORM is not defined and only MACHINE_START in
  arch/arm/mach-zynq/common.c matters.
of_scan_flat_dt(): why can't we unflatten tree early? Perhaps init-time data
structures are transient / are invalidated by memory mngt?
I assume
  CONFIG_CMDLINE=false.
  CONFIG_BLK_DEV_INITRD=false
BUG: arch/arm/kernel/setup.c(524) s/b
   and = (start & ~PAGE_MASK)
   if (and) {
       size = max(0, (signed)(size - PAGE_SIZE + and));
   }
-------------
Gorman "understand.pdf"
RTFS
NUMA nodes: struct pglist_data, pg_data_t, contig_page_data(UMA).
  zones: struct zone_struct, zone_t: ZONE_{DMA(isa), NORMAL, HIGHMEM}.
    page frames: struct page, mem_map[] stored at beg of ZONE_NORMAL.
Zone watermarks: low (wakeup kswapd), high (kswapd sleeps), min (sync freepage).
  !!!DOES KSWAPD ever wakeup on eyes??? !!!
min_low_pfn: where defined on arm?
max_pfn, max_low_pfn = defined in arch/arm/mm/init.c:bootmem_init,
   apparently based on meminfo min/maxes that comes straight from DT /memory.
   This determines size of zone created by free_area_init_node().
   !!See arch/arm/mm/init.c, mm/page_alloc!!
process address space = mm_struct (cf task_struct = thread)
  vm_area_struct = program region (text, data, etc).
switch_mm = TLB flush: lazy TLB
-------------
PSCI: ARM power state coordination interface
--------------------------------------------------------------------------------
early_params:
debug: console_loglevel=10
quiet: console_loglevel=4
initrd=start,size
mem=size@start
cachepolicy
nocache
nowb
ecc
vmalloc
--------------------------------------------------------------------------------
early_initcall() = builtin module_init() ftns
migration_init
--------------------------------------------------------------------------------
kernel_init_freeable()
  do_pre_smp_initcalls()
    customize_machine()
      zynq_init_machine()
        soc_device_register()
	  device_register(&soc_dev)
        of_platform_populate(): creates devices from dt nodes.
          of_platform_bus_create(): recusively create platform_device for nodes
            of_platform_device_create_pdata(): create&register a platform_device
              of_device_add()
      	        device_add(): notification
  smp_init()
    idle_threads_init()
      for_each_possible_cpu(other than boot_cpu)
        idle_init()
	  fork_idle() [init idle thread; saved in per_cpu(idle_threads,cpu)]
	             so I guess secondary cpu threads will start exec'ing here
		     But from syslog() is seems secondary threads start 
		     somewhere in sched_init() b/c of the mem_init printfs -
		     but no: start_kernel calls mem_init right BEFORE sched_init
          init_idle(kernel/sched/core):
	    sets idle task's comm = "swapper/1"?? why doesn't show in "ps aux"??
    cpu_up()
      _cpu_up():
	smpboot_create_threads(kernel/smpboot.c)
	  __smpboot_create_thread()
	    kthread_create_on_cpu(smpboot_thread_fn)
	  create per-cpu hotplug threads (ksoftirq/%d); run smpboot_thread_fn
        __cpu_up()
	  smp_ops.smp_boot_secondary(uint cpu, struct task_struct *idle)
	    google "arm secondary cpu boot"
	    ??where is this function??.
    "Brought up 2 CPUs"
    smp_cpus_done(): "SMP: Total of 2 processors..."
  do_basic_setup()
  sys_open("/dev/console")
  sys_dup(0), sys_dup(0)
  load_default_modules()
--------------------------------------------------------------------------------
core_init_call(netlink_proto_init())
  sock_register(): "NET: Registered protocol family 16" (AF_NETLINK)
postcore_init_call(atomic_pool_init()): "DMA: preallocated 256 KiB..."
subsys_initcall(xgpio_init): ?"xgpiops ... at...mapped to ..."?
arch_initcall(arch_hw_breakpoint): "hw-breakpoint: found 5..."; 
                                   "hw-breakpoint: maximum watchpoint..."
subsys_initcall(init_scsi): "SCSI subsystem initialized"
subsys_initcall(pps_init): "pps_core: LinuxPPS..."
fs_initcall(clocksource_done_booting): "Switching to clocksource xttcps_..."
fs_initcall(inet_init): "NET: Registered protocol family 2" AF_INET
fs_initcall(tcp_init): "TCP..."
fs_initcall(udp_init): "UDP..."
fs_initcall(af_unix_init): "NET: Registered procotol family 1" (AF_UNIX)
fs_initcall(init_sunrpc): "RPC: ..."
rootfs_initcall(populate_rootfs): "Trying to unpack..."
        free_initrd()
          free_initrd_mem()
            free_reserved_area(): "Freeing initrd memory: 3308K"
device_initcall(register_pmu_driver)
  platform_driver_register(&cpu_pmu_driver)
    cpu_pmu_device_probe
      armpmu_register: "hw perfevents: enabled with ARMv7..."
__initcall(init_emergency_pool): "bounce pool size: 64 pages"
module_init(init_jffs2_fs): "jffs2: version 2.2..."
__initcall(ipc_init)
  msg_init: "msgmni has been set to 1495"
do_basic_setup
  cpuset_init_smp
  usermodehelper_init
  shmem_init
  driver_init
    devtmpfs_init: "devtmpfs: initialized"
  init_irq_proc
  do_ctors
  usermodehelper_enable
  do_initcalls
module_init(noop_init)
  elv_register: "io scheduler noop registered"
module_init(deadline_init)
  elv_register: "io scheduler deadline registered"
module_init(cfq_init)
  elv_register: "io scheduler cfq registered"
module_amba_driver(pl330_driver)
  pl330_probe: "dma-pl330...Loaded driver for PL330 DMAC.."; "...Num_Chans..."
xuartps_probe
  uart_add_one_port
--------------------------------------------------------------------------------
struct platform_driver xuartps_platform_driver = {
    .probe = xuartps_probe
};
platform_driver_register(&xuartps_platform_driver)
--------------------------------------------------------------------------------
xprt_register_transport()
--------------------------------------------------------------------------------
mm_init()
  page_ext_init_flatmem()
  mem_init(): "Memory: ......."
  kmem_cache_init()
  percpu_init_late()
  pgtable_init()
  vmalloc_init()
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
parse_tag_initrd2() -> phys_initrd_start&size
--------------------------------------------------------------------------------
setup_arch()
  setup_processor(): "CPU: ARMv7...", "CPU: PIPT / VIPT..."
    lookup_processor_type()
      __lookup_processor_type()
  machine_desc = setup_machine_fdt()
    "Machine: Xilinx Zynq..."
    of_scan_flat_dt("/chosen")->boot_command_line
      early_init_dt_check_for_initrd(): DT "linux,initrd-start/end" we don't use
    of_scan_flat_dt()->top-level #address-cells, #size-cells
      early_init_dt_add_memory_arch("/memory")
        arm_add_memory(base, size)
  parse_early_param()
  arm_memblock_init()
    memblock_add(): adds single DT /memory bank 0-4000000
    dma_contiguous_reserve()
      dma_contiguous_reserve_area()
        cma_declare_contiguous(): "cma: CMA: reserved 16MiB @ 2e800000"
  paging_init(mdesc)
    build_mem_type_table(): "Memory policy: ECC disabled, Data cache writealloc"
    bootmem_init()
      arm_bootmem_init
      arm_bootmem_free
	<gorman Fig 2.5>
        free_area_init_node
          free_area_init_core
  unflatten_device_tree()
  arm_dt_init_cpu_maps()
  smp_set_ops(mdesc->smp): ???where mdesc->smp defined???
--------------------------------------------------------------------------------
mnt_init()
    kernfs_init()
    sysfs_init()
    init_rootfs()
    init_mount_tree()
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
init_IRQ()
  machine_desc->init_irq()
    zynq_irq_init()
    irqchip_init()
--------------------------------------------------------------------------------
start_kernel()
  lockdep_init()
  set_task_stack_end_magic(&init_task)
  smp_setup_processor_id(): "Booting Linux on physical CPU 0x0"
  local_irq_disable()
  boot_cpu_init()
  page_address_init() [relevant on ARM?]
  pr_notice(linux_banner): "Linux version 3.8.0-xilinx..."
  setup_arch(): <above>
  setup_per_cpu_areas()
    pcpu_embed_first_chunk(): "PERCPU: Embedded 7 pages/cpu @..."
    <define __per_cpu_offset[cpu] += .data..percpu scn size or some such magic>
    <used by per_cpu() macro>
  build_all_zonelists(): "Built 1 zonelists in Zone order ..."
  page_alloc_init()
  printk("Kernel command line: ...");
  parse_early_param();
    parse_args(... boot_command_line, do_early_param ...)
      <recognize cmdline options defined in .init.setup section, + "console">
  pidhash_init()
    alloc_large_system_hash(): "PID hash table entries: 4096..."
  vfs_caches_init_early()
    dcache_init_early()
      alloc_large_system_hash(): "Dentry cache hash table entries: 131072..."
    inode_init_early()
      alloc_large_system_hash(): "Inode-cache hash table entries: 65536..."
  sort_main_extable(): "__ex_table already sorted..."
  mm_init()
  sched_init()
  rcu_init()
    rcu_bootup_announce(): "Preemptible hierarchical RCU implementation"
    rcu_bootup_announce_oddness(): "#011Dump stacks..."
  early_irq_init(): "NR_IRQS: 16 nr_irqs:16 16"
  init_IRQ()
    machine_desc->init_irq()
      zynq_irq_init()
      irqchip_init()
  tick_init()
    clockevents_register_notifier(&tick_notifier -> tick_notify)
  init_timers()
    timer_cpu_notify(&timers_nb -> timer_cpu_notify)
      timer_cpu_notify()
        init_timers_cpu()
  time_init()
    machine_desc->timer.init()
    xttcpss_sys_timer.xilinx_zynq_timer_init()
      np = of_find_compatible_node(NULL, NULL, "xlnx,zynq-slcr");
      slcr = of_iomap(np, 0);
      xilinx_zynq_clocks_init(slcr);
      xttcpss_timer_init();
  console_init()
  buffer_init()
  vfs_caches_init()
    dcache_init()
    inode_init()
    files_init()
    mnt_init()
      alloc_large_system_hash(): "Mount-cache hash table entries: 512..."
    bdev_cache_init()
    chrdev_init()
  signals_init()
  check_bugs()
    check_writebuffer_bugs(): "CPU: testing write buffer coherency: ok"
  rest_init()
    rcu_scheduler_starting()
    kernel_thread(kernel_init)
      kernel_init_freeable() <above>
      free_initmem()
      try_to_run_init_process(): execve("/sbin/init")
    init_idle_bootup_task(current)
    cpu_startup_entry()
--------------------------------------------------------------------------------
secondary_start_kernel
--------------------------------------------------------------------------------
xilinx_zynq_clocks_init
  of_clk_init
    clk_init_cb ->
init/main.c

__init, __initdata. free_initmem().



kernel threads
  kernel_thread(CLONE_FS? CLONE_FILES?)
  find_Task_by_pid_ns()

locking
	rcu_scheduler_starting()
	rcu_read_lock()/unlock()
	
cpu
	smp_processor_id()
	set_cpu_online()/active()/present()/possible()


