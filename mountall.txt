So what does mountall do?
 mounts filesystems in dependency order, but in parallel if possible.
 emits 'filesystems' etc events to Upstart via Dbus 
 runs fsck: passes errors to user and asks (via Plymouth) for what to do
 your fstab assigns /mnt/boot a passno!=0, right? That forces fsck!
      see fs_passno description on fstab(5) manpage.
      note (line 2327 mountall.c) that rootfs is NOT fsck'd even if force_fsck.
      Is there an fsck.vfat in PATH? (See missing_fsck() line 2332.)
      line 2344: if mnt->mounted don't fsck it UNLESS it's "ro".
		Perhaps we fsck /mnt/boot before and after mounting it?
 parses fsck output to update plymouth progress bar:
    wikipedia: Plymouth "also handles user interaction during boot"
  "Disconnected from Plymouth": perhaps we try to connect to plymouth during
    fsck (plymouth_progress()) and this must immediately invoke
     plymouth_disconnected() which prints the "Disconnected from..." msg.
     Might try booting laptop from SD card just to see Plymouth fsck progress.
     See google/bookmark under ubuntu-upstart, or google
 	 "ubuntu boot from sd card".
------------------
fstab(5) manpage [in precise]:
   mountall(8) recognizes addtl options: 
	bootwait, nobootwait, showthrough, optional.
main
0) nih_option_parser(): try verbose, debug, & help options.

1)
  connect to upstart (/com/Ubuntu/Upstart) via dbus proxy 
   addr of private D-Bus srvr inside Upstart "unix:abstract=/com/ubuntu/upstart"
   our control server address: "unix:abstract=/com/ubuntu/mountall"
   obj path used by manager object (root used for all other objs):
		/com/ubuntu/Mountall/Server
2) connect to udev via monitor,
     add read watch routine - udev_monitor_watcher() - for monitor fd.
3) plymouth event loop
     add read watch routine - ply_event_loop_process_pending().
     plymouth_connect() ??
x) init 'mounts' list
4) Parse /proc/filesystems (??)
   build filesystems[] = {name, nodev} for each filesystem.
5) init mount table:
    add a new Mount entry to mounts list, 
       unless it's already there in which case update it
     NB: mnt->check = (passno != 0)
   Do this for 
	/lib/init/fstab (builtin fstab)
        /etc/fstab
 	/proc/mounts (aka /proc/self/mountinfo)
   libc <mntent.h>: access etc/fstab & /etc/mtab.
	struct mntent {
 		char *fsname (device), *dir (mountpoint), *type, *opts;
		int freq (dump freq in days), passno (parallel fsck);
	}
6) mount_policy()
   build already_mounted list; ignore mounts that would hide already-mnted.
   build mnt->deps: parents of each mount (child mount will wait for parent)
x) open_control_server()
    DBusServer = dbus_server( "unix:abstract=/com/ubuntu/mountall", ...)
    register 'DBusInterface control_interfaces[]' on /com/ubuntu/Mountall/Server
    ??
7) try_mounts() (our main_loop() callback)
   once this finds all mounts done, calls
	dbus_server_disconnect(control_server)
	main_loop_exit(OK)
   for unmounted (or needs remount) mounts: try_mount()
       foreach mnt->deps
  	  if dep not mounted, wait (ie skip this mount)
   	  if (!mnt->ready && mnt->device == /dev/xxx) wait for udev
      	  if (!mnt->ready && !remote) run_fsck()
          else run_mount()
8) run_mount()
    nih_info("mounting %s")
     spawn({mount -t <typ> -o <opts> device mountpoint}, run_mount_finished)
9) run_mount_finished()
    mnt->mounted = TRUE; -> main_loop_interrupt()
10) trigger_events() calls upstart_emit_event(upstart) ie via D-Bus:
	remote-filesystems
	virtual-filesystems
	local-filesystems
	filesystems = "aggregate event for all filesystems" = {virt, loc, rem}
11) plymouth_progress(): only if plymouth
